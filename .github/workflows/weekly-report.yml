name: Weekly Fantasy Football Report

on:
  schedule:
    # Run every Tuesday at 10:00 UTC (6am EDT or 5am EST)
    - cron: '0 10 * * 2'

  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      email_recipients:
        description: 'Email recipients (comma-separated, leave empty to use default from secrets)'
        required: false
        type: string
      email_from:
        description: 'Email sender (leave empty to use default from secrets)'
        required: false
        type: string
      skip_email:
        description: 'Skip sending email (useful for testing report generation only)'
        required: false
        type: boolean
        default: false

env:
  PYTHONUNBUFFERED: 1

jobs:
  generate-report:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: uv sync

    - name: Create .env file from secrets
      run: |
        echo "LEAGUE_IDS=${{ secrets.LEAGUE_IDS }}" > .env
        if [ -n "${{ secrets.ESPN_SWID }}" ]; then
          echo "ESPN_SWID=${{ secrets.ESPN_SWID }}" >> .env
        fi
        if [ -n "${{ secrets.ESPN_S2 }}" ]; then
          echo "ESPN_S2=${{ secrets.ESPN_S2 }}" >> .env
        fi

    - name: Generate fantasy football report
      id: generate-report
      run: |
        # Determine if private leagues are needed
        if [ -n "${{ secrets.ESPN_SWID }}" ] && [ -n "${{ secrets.ESPN_S2 }}" ]; then
          PRIVATE_FLAG="--private"
        else
          PRIVATE_FLAG=""
        fi

        # Capture start time
        START_TIME=$(date +%s)

        # Generate all output formats in one execution using --output-dir
        uv run ff-tracker --env $PRIVATE_FLAG --output-dir ./reports

        # Calculate execution time
        END_TIME=$(date +%s)
        EXECUTION_TIME=$((END_TIME - START_TIME))

        # Extract current week from console output
        CURRENT_WEEK=$(grep "^CURRENT_WEEK=" ./reports/standings.txt | cut -d'=' -f2)

        # Fallback to date-based calculation if parsing fails
        if [ -z "$CURRENT_WEEK" ] || [ "$CURRENT_WEEK" = "unknown" ]; then
          CURRENT_WEEK=$(date +%U)
          echo "Warning: Could not extract current week from output, using date-based fallback: $CURRENT_WEEK"
        else
          echo "Extracted current week from fantasy football data: $CURRENT_WEEK"
        fi

        echo "current_week=${CURRENT_WEEK}" >> $GITHUB_OUTPUT
        echo "execution_time=${EXECUTION_TIME}" >> $GITHUB_OUTPUT
        echo "report_generated=true" >> $GITHUB_OUTPUT

    # Read HTML report content for email body
    - name: Prepare email content
      id: prepare-email
      if: steps.generate-report.outputs.report_generated == 'true'
      run: |
        # Inject metadata into HTML report
        GENERATED_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EXECUTION_TIME="${{ steps.generate-report.outputs.execution_time }}"
        RUN_ID="${{ github.run_id }}"
        REPO="${{ github.repository }}"

        # Create metadata HTML
        METADATA_HTML="Generated: ${GENERATED_TIME} (took ${EXECUTION_TIME}s)<br>"
        METADATA_HTML+="<a href=\"https://github.com/${REPO}/actions/runs/${RUN_ID}\" style=\"color: #3498db; text-decoration: none;\">Download Full Report Artifacts ðŸ“¦</a><br>"

        # Inject metadata between comment markers using sed
        sed -i "s|<!-- GENERATED_METADATA_START --><!-- GENERATED_METADATA_END -->|<!-- GENERATED_METADATA_START -->${METADATA_HTML}<!-- GENERATED_METADATA_END -->|g" ./reports/standings.html

        # Verify the file exists and was modified
        if [ -f ./reports/standings.html ]; then
          echo "html_ready=true" >> $GITHUB_OUTPUT
          echo "Successfully injected metadata into HTML report"
        else
          echo "html_ready=false" >> $GITHUB_OUTPUT
          echo "Error: HTML file not found" >&2
          exit 1
        fi

    - name: Send email report
      if: steps.generate-report.outputs.report_generated == 'true' && inputs.skip_email != true
      uses: dawidd6/action-send-mail@v6
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT || '2525' }}
        secure: ${{ secrets.SMTP_SECURE || 'false' }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "Weekly Fantasy Football Report - Week ${{ steps.generate-report.outputs.current_week }}"
        from: "MM Fantasy Football League <${{ inputs.email_from || secrets.EMAIL_FROM }}>"
        to: ${{ inputs.email_from || secrets.EMAIL_FROM }}
        bcc: ${{ inputs.email_recipients || secrets.EMAIL_RECIPIENTS }}
        html_body: file://./reports/standings.html

    - name: Upload report artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: weekly-report-week-${{ steps.generate-report.outputs.current_week }}
        path: |
          ./reports/standings.txt
          ./reports/standings.tsv
          ./reports/standings.html
          ./reports/standings.json
          ./reports/standings.md
        retention-days: 30